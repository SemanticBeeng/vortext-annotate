/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package spa.services.structs;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Interval implements org.apache.thrift.TBase<Interval, Interval._Fields>, java.io.Serializable, Cloneable, Comparable<Interval> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Interval");

  private static final org.apache.thrift.protocol.TField UPPER_FIELD_DESC = new org.apache.thrift.protocol.TField("upper", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOWER_FIELD_DESC = new org.apache.thrift.protocol.TField("lower", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IntervalStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IntervalTupleSchemeFactory());
  }

  public int upper; // required
  public int lower; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UPPER((short)1, "upper"),
    LOWER((short)2, "lower");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UPPER
          return UPPER;
        case 2: // LOWER
          return LOWER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UPPER_ISSET_ID = 0;
  private static final int __LOWER_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UPPER, new org.apache.thrift.meta_data.FieldMetaData("upper", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOWER, new org.apache.thrift.meta_data.FieldMetaData("lower", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Interval.class, metaDataMap);
  }

  public Interval() {
  }

  public Interval(
    int upper,
    int lower)
  {
    this();
    this.upper = upper;
    setUpperIsSet(true);
    this.lower = lower;
    setLowerIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Interval(Interval other) {
    __isset_bitfield = other.__isset_bitfield;
    this.upper = other.upper;
    this.lower = other.lower;
  }

  public Interval deepCopy() {
    return new Interval(this);
  }

  @Override
  public void clear() {
    setUpperIsSet(false);
    this.upper = 0;
    setLowerIsSet(false);
    this.lower = 0;
  }

  public int getUpper() {
    return this.upper;
  }

  public Interval setUpper(int upper) {
    this.upper = upper;
    setUpperIsSet(true);
    return this;
  }

  public void unsetUpper() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPPER_ISSET_ID);
  }

  /** Returns true if field upper is set (has been assigned a value) and false otherwise */
  public boolean isSetUpper() {
    return EncodingUtils.testBit(__isset_bitfield, __UPPER_ISSET_ID);
  }

  public void setUpperIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPPER_ISSET_ID, value);
  }

  public int getLower() {
    return this.lower;
  }

  public Interval setLower(int lower) {
    this.lower = lower;
    setLowerIsSet(true);
    return this;
  }

  public void unsetLower() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOWER_ISSET_ID);
  }

  /** Returns true if field lower is set (has been assigned a value) and false otherwise */
  public boolean isSetLower() {
    return EncodingUtils.testBit(__isset_bitfield, __LOWER_ISSET_ID);
  }

  public void setLowerIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOWER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UPPER:
      if (value == null) {
        unsetUpper();
      } else {
        setUpper((Integer)value);
      }
      break;

    case LOWER:
      if (value == null) {
        unsetLower();
      } else {
        setLower((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UPPER:
      return Integer.valueOf(getUpper());

    case LOWER:
      return Integer.valueOf(getLower());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UPPER:
      return isSetUpper();
    case LOWER:
      return isSetLower();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Interval)
      return this.equals((Interval)that);
    return false;
  }

  public boolean equals(Interval that) {
    if (that == null)
      return false;

    boolean this_present_upper = true;
    boolean that_present_upper = true;
    if (this_present_upper || that_present_upper) {
      if (!(this_present_upper && that_present_upper))
        return false;
      if (this.upper != that.upper)
        return false;
    }

    boolean this_present_lower = true;
    boolean that_present_lower = true;
    if (this_present_lower || that_present_lower) {
      if (!(this_present_lower && that_present_lower))
        return false;
      if (this.lower != that.lower)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_upper = true;
    builder.append(present_upper);
    if (present_upper)
      builder.append(upper);

    boolean present_lower = true;
    builder.append(present_lower);
    if (present_lower)
      builder.append(lower);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(Interval other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUpper()).compareTo(other.isSetUpper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upper, other.upper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLower()).compareTo(other.isSetLower());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLower()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lower, other.lower);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Interval(");
    boolean first = true;

    sb.append("upper:");
    sb.append(this.upper);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lower:");
    sb.append(this.lower);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'upper' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'lower' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IntervalStandardSchemeFactory implements SchemeFactory {
    public IntervalStandardScheme getScheme() {
      return new IntervalStandardScheme();
    }
  }

  private static class IntervalStandardScheme extends StandardScheme<Interval> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Interval struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UPPER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.upper = iprot.readI32();
              struct.setUpperIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOWER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lower = iprot.readI32();
              struct.setLowerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUpper()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'upper' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLower()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'lower' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Interval struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(UPPER_FIELD_DESC);
      oprot.writeI32(struct.upper);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOWER_FIELD_DESC);
      oprot.writeI32(struct.lower);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IntervalTupleSchemeFactory implements SchemeFactory {
    public IntervalTupleScheme getScheme() {
      return new IntervalTupleScheme();
    }
  }

  private static class IntervalTupleScheme extends TupleScheme<Interval> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Interval struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.upper);
      oprot.writeI32(struct.lower);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Interval struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.upper = iprot.readI32();
      struct.setUpperIsSet(true);
      struct.lower = iprot.readI32();
      struct.setLowerIsSet(true);
    }
  }

}

