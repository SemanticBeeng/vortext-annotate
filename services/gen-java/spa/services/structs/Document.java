/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package spa.services.structs;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Document implements org.apache.thrift.TBase<Document, Document._Fields>, java.io.Serializable, Cloneable, Comparable<Document> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Document");

  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TEXT_NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("textNodes", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField MARGINALIA_FIELD_DESC = new org.apache.thrift.protocol.TField("marginalia", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField META_FIELD_DESC = new org.apache.thrift.protocol.TField("meta", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DocumentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DocumentTupleSchemeFactory());
  }

  public String text; // required
  public List<TextNode> textNodes; // required
  public List<Marginalis> marginalia; // optional
  public Map<String,Mapping> meta; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEXT((short)1, "text"),
    TEXT_NODES((short)2, "textNodes"),
    MARGINALIA((short)3, "marginalia"),
    META((short)4, "meta");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEXT
          return TEXT;
        case 2: // TEXT_NODES
          return TEXT_NODES;
        case 3: // MARGINALIA
          return MARGINALIA;
        case 4: // META
          return META;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.MARGINALIA,_Fields.META};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEXT_NODES, new org.apache.thrift.meta_data.FieldMetaData("textNodes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TextNode.class))));
    tmpMap.put(_Fields.MARGINALIA, new org.apache.thrift.meta_data.FieldMetaData("marginalia", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Marginalis.class))));
    tmpMap.put(_Fields.META, new org.apache.thrift.meta_data.FieldMetaData("meta", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Mapping.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Document.class, metaDataMap);
  }

  public Document() {
  }

  public Document(
    String text,
    List<TextNode> textNodes)
  {
    this();
    this.text = text;
    this.textNodes = textNodes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Document(Document other) {
    if (other.isSetText()) {
      this.text = other.text;
    }
    if (other.isSetTextNodes()) {
      List<TextNode> __this__textNodes = new ArrayList<TextNode>(other.textNodes.size());
      for (TextNode other_element : other.textNodes) {
        __this__textNodes.add(new TextNode(other_element));
      }
      this.textNodes = __this__textNodes;
    }
    if (other.isSetMarginalia()) {
      List<Marginalis> __this__marginalia = new ArrayList<Marginalis>(other.marginalia.size());
      for (Marginalis other_element : other.marginalia) {
        __this__marginalia.add(new Marginalis(other_element));
      }
      this.marginalia = __this__marginalia;
    }
    if (other.isSetMeta()) {
      Map<String,Mapping> __this__meta = new HashMap<String,Mapping>(other.meta.size());
      for (Map.Entry<String, Mapping> other_element : other.meta.entrySet()) {

        String other_element_key = other_element.getKey();
        Mapping other_element_value = other_element.getValue();

        String __this__meta_copy_key = other_element_key;

        Mapping __this__meta_copy_value = new Mapping(other_element_value);

        __this__meta.put(__this__meta_copy_key, __this__meta_copy_value);
      }
      this.meta = __this__meta;
    }
  }

  public Document deepCopy() {
    return new Document(this);
  }

  @Override
  public void clear() {
    this.text = null;
    this.textNodes = null;
    this.marginalia = null;
    this.meta = null;
  }

  public String getText() {
    return this.text;
  }

  public Document setText(String text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  public int getTextNodesSize() {
    return (this.textNodes == null) ? 0 : this.textNodes.size();
  }

  public java.util.Iterator<TextNode> getTextNodesIterator() {
    return (this.textNodes == null) ? null : this.textNodes.iterator();
  }

  public void addToTextNodes(TextNode elem) {
    if (this.textNodes == null) {
      this.textNodes = new ArrayList<TextNode>();
    }
    this.textNodes.add(elem);
  }

  public List<TextNode> getTextNodes() {
    return this.textNodes;
  }

  public Document setTextNodes(List<TextNode> textNodes) {
    this.textNodes = textNodes;
    return this;
  }

  public void unsetTextNodes() {
    this.textNodes = null;
  }

  /** Returns true if field textNodes is set (has been assigned a value) and false otherwise */
  public boolean isSetTextNodes() {
    return this.textNodes != null;
  }

  public void setTextNodesIsSet(boolean value) {
    if (!value) {
      this.textNodes = null;
    }
  }

  public int getMarginaliaSize() {
    return (this.marginalia == null) ? 0 : this.marginalia.size();
  }

  public java.util.Iterator<Marginalis> getMarginaliaIterator() {
    return (this.marginalia == null) ? null : this.marginalia.iterator();
  }

  public void addToMarginalia(Marginalis elem) {
    if (this.marginalia == null) {
      this.marginalia = new ArrayList<Marginalis>();
    }
    this.marginalia.add(elem);
  }

  public List<Marginalis> getMarginalia() {
    return this.marginalia;
  }

  public Document setMarginalia(List<Marginalis> marginalia) {
    this.marginalia = marginalia;
    return this;
  }

  public void unsetMarginalia() {
    this.marginalia = null;
  }

  /** Returns true if field marginalia is set (has been assigned a value) and false otherwise */
  public boolean isSetMarginalia() {
    return this.marginalia != null;
  }

  public void setMarginaliaIsSet(boolean value) {
    if (!value) {
      this.marginalia = null;
    }
  }

  public int getMetaSize() {
    return (this.meta == null) ? 0 : this.meta.size();
  }

  public void putToMeta(String key, Mapping val) {
    if (this.meta == null) {
      this.meta = new HashMap<String,Mapping>();
    }
    this.meta.put(key, val);
  }

  public Map<String,Mapping> getMeta() {
    return this.meta;
  }

  public Document setMeta(Map<String,Mapping> meta) {
    this.meta = meta;
    return this;
  }

  public void unsetMeta() {
    this.meta = null;
  }

  /** Returns true if field meta is set (has been assigned a value) and false otherwise */
  public boolean isSetMeta() {
    return this.meta != null;
  }

  public void setMetaIsSet(boolean value) {
    if (!value) {
      this.meta = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((String)value);
      }
      break;

    case TEXT_NODES:
      if (value == null) {
        unsetTextNodes();
      } else {
        setTextNodes((List<TextNode>)value);
      }
      break;

    case MARGINALIA:
      if (value == null) {
        unsetMarginalia();
      } else {
        setMarginalia((List<Marginalis>)value);
      }
      break;

    case META:
      if (value == null) {
        unsetMeta();
      } else {
        setMeta((Map<String,Mapping>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEXT:
      return getText();

    case TEXT_NODES:
      return getTextNodes();

    case MARGINALIA:
      return getMarginalia();

    case META:
      return getMeta();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEXT:
      return isSetText();
    case TEXT_NODES:
      return isSetTextNodes();
    case MARGINALIA:
      return isSetMarginalia();
    case META:
      return isSetMeta();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Document)
      return this.equals((Document)that);
    return false;
  }

  public boolean equals(Document that) {
    if (that == null)
      return false;

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_textNodes = true && this.isSetTextNodes();
    boolean that_present_textNodes = true && that.isSetTextNodes();
    if (this_present_textNodes || that_present_textNodes) {
      if (!(this_present_textNodes && that_present_textNodes))
        return false;
      if (!this.textNodes.equals(that.textNodes))
        return false;
    }

    boolean this_present_marginalia = true && this.isSetMarginalia();
    boolean that_present_marginalia = true && that.isSetMarginalia();
    if (this_present_marginalia || that_present_marginalia) {
      if (!(this_present_marginalia && that_present_marginalia))
        return false;
      if (!this.marginalia.equals(that.marginalia))
        return false;
    }

    boolean this_present_meta = true && this.isSetMeta();
    boolean that_present_meta = true && that.isSetMeta();
    if (this_present_meta || that_present_meta) {
      if (!(this_present_meta && that_present_meta))
        return false;
      if (!this.meta.equals(that.meta))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_text = true && (isSetText());
    builder.append(present_text);
    if (present_text)
      builder.append(text);

    boolean present_textNodes = true && (isSetTextNodes());
    builder.append(present_textNodes);
    if (present_textNodes)
      builder.append(textNodes);

    boolean present_marginalia = true && (isSetMarginalia());
    builder.append(present_marginalia);
    if (present_marginalia)
      builder.append(marginalia);

    boolean present_meta = true && (isSetMeta());
    builder.append(present_meta);
    if (present_meta)
      builder.append(meta);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(Document other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetText()).compareTo(other.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTextNodes()).compareTo(other.isSetTextNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTextNodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textNodes, other.textNodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarginalia()).compareTo(other.isSetMarginalia());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarginalia()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marginalia, other.marginalia);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeta()).compareTo(other.isSetMeta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meta, other.meta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Document(");
    boolean first = true;

    sb.append("text:");
    if (this.text == null) {
      sb.append("null");
    } else {
      sb.append(this.text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("textNodes:");
    if (this.textNodes == null) {
      sb.append("null");
    } else {
      sb.append(this.textNodes);
    }
    first = false;
    if (isSetMarginalia()) {
      if (!first) sb.append(", ");
      sb.append("marginalia:");
      if (this.marginalia == null) {
        sb.append("null");
      } else {
        sb.append(this.marginalia);
      }
      first = false;
    }
    if (isSetMeta()) {
      if (!first) sb.append(", ");
      sb.append("meta:");
      if (this.meta == null) {
        sb.append("null");
      } else {
        sb.append(this.meta);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (text == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'text' was not present! Struct: " + toString());
    }
    if (textNodes == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'textNodes' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DocumentStandardSchemeFactory implements SchemeFactory {
    public DocumentStandardScheme getScheme() {
      return new DocumentStandardScheme();
    }
  }

  private static class DocumentStandardScheme extends StandardScheme<Document> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Document struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.text = iprot.readString();
              struct.setTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEXT_NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.textNodes = new ArrayList<TextNode>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  TextNode _elem26;
                  _elem26 = new TextNode();
                  _elem26.read(iprot);
                  struct.textNodes.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setTextNodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MARGINALIA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.marginalia = new ArrayList<Marginalis>(_list27.size);
                for (int _i28 = 0; _i28 < _list27.size; ++_i28)
                {
                  Marginalis _elem29;
                  _elem29 = new Marginalis();
                  _elem29.read(iprot);
                  struct.marginalia.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setMarginaliaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // META
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map30 = iprot.readMapBegin();
                struct.meta = new HashMap<String,Mapping>(2*_map30.size);
                for (int _i31 = 0; _i31 < _map30.size; ++_i31)
                {
                  String _key32;
                  Mapping _val33;
                  _key32 = iprot.readString();
                  _val33 = new Mapping();
                  _val33.read(iprot);
                  struct.meta.put(_key32, _val33);
                }
                iprot.readMapEnd();
              }
              struct.setMetaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Document struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.text != null) {
        oprot.writeFieldBegin(TEXT_FIELD_DESC);
        oprot.writeString(struct.text);
        oprot.writeFieldEnd();
      }
      if (struct.textNodes != null) {
        oprot.writeFieldBegin(TEXT_NODES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.textNodes.size()));
          for (TextNode _iter34 : struct.textNodes)
          {
            _iter34.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.marginalia != null) {
        if (struct.isSetMarginalia()) {
          oprot.writeFieldBegin(MARGINALIA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.marginalia.size()));
            for (Marginalis _iter35 : struct.marginalia)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.meta != null) {
        if (struct.isSetMeta()) {
          oprot.writeFieldBegin(META_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.meta.size()));
            for (Map.Entry<String, Mapping> _iter36 : struct.meta.entrySet())
            {
              oprot.writeString(_iter36.getKey());
              _iter36.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DocumentTupleSchemeFactory implements SchemeFactory {
    public DocumentTupleScheme getScheme() {
      return new DocumentTupleScheme();
    }
  }

  private static class DocumentTupleScheme extends TupleScheme<Document> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Document struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.text);
      {
        oprot.writeI32(struct.textNodes.size());
        for (TextNode _iter37 : struct.textNodes)
        {
          _iter37.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetMarginalia()) {
        optionals.set(0);
      }
      if (struct.isSetMeta()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetMarginalia()) {
        {
          oprot.writeI32(struct.marginalia.size());
          for (Marginalis _iter38 : struct.marginalia)
          {
            _iter38.write(oprot);
          }
        }
      }
      if (struct.isSetMeta()) {
        {
          oprot.writeI32(struct.meta.size());
          for (Map.Entry<String, Mapping> _iter39 : struct.meta.entrySet())
          {
            oprot.writeString(_iter39.getKey());
            _iter39.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Document struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.text = iprot.readString();
      struct.setTextIsSet(true);
      {
        org.apache.thrift.protocol.TList _list40 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.textNodes = new ArrayList<TextNode>(_list40.size);
        for (int _i41 = 0; _i41 < _list40.size; ++_i41)
        {
          TextNode _elem42;
          _elem42 = new TextNode();
          _elem42.read(iprot);
          struct.textNodes.add(_elem42);
        }
      }
      struct.setTextNodesIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list43 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.marginalia = new ArrayList<Marginalis>(_list43.size);
          for (int _i44 = 0; _i44 < _list43.size; ++_i44)
          {
            Marginalis _elem45;
            _elem45 = new Marginalis();
            _elem45.read(iprot);
            struct.marginalia.add(_elem45);
          }
        }
        struct.setMarginaliaIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map46 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.meta = new HashMap<String,Mapping>(2*_map46.size);
          for (int _i47 = 0; _i47 < _map46.size; ++_i47)
          {
            String _key48;
            Mapping _val49;
            _key48 = iprot.readString();
            _val49 = new Mapping();
            _val49.read(iprot);
            struct.meta.put(_key48, _val49);
          }
        }
        struct.setMetaIsSet(true);
      }
    }
  }

}

